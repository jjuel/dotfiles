#+BEGIN_SRC emacs-lisp
;;; Package --- Summary
;;; Commentary:
(require 'package)

;;; Code:
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(package-initialize)

;; Fixes error that is fixed in Emacs 26.3
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

;; Set up Use-Package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; Misc Settings
(electric-pair-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
;; (global-linum-mode t)
;; (setq linum-format "%2d ")
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq inhibit-startup-screen t)

;; Font Settings
(set-face-attribute 'default nil
		    :family "JetBrains Mono"
		    :height (* 14 10))

;; Theme
;; (use-package dracula-theme
;;   :ensure t
;;   :init (load-theme 'dracula t))

;; (use-package base16-theme
;;   :ensure t
;;   :init (load-theme 'base16-solarized-light t))
(load-theme 'solarized-dark t)

;; Eshell
(defun eshell/eclear ()
  (interactive)
  (let ((eshell-buffer-maximum-lines 0)) (eshell-truncate-buffer)))

(global-set-key "\C-l" 'eshell/eclear)
(global-set-key (kbd "C-x E") 'eshell)

;; -------- ;;
;; Packages
;; -------- ;;

;; Evil
(use-package evil
  :ensure t
  :config
  (evil-mode 1))

;; General
(use-package general
  :ensure t)

;; Which Key
(use-package which-key
  :ensure t)

;; Magit
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

;; LSP
(use-package lsp-mode 
  :ensure t
  :init (setq lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))
(use-package company-lsp 
  :ensure t
  :commands company-lsp)
(use-package lsp-ui 
  :ensure t
  :commands lsp-ui-mode
  :init)

;; Dap
(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))

;; Company
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  :defer t
  :init (global-company-mode))
  
;; Ivy
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d%d) ")
  (global-set-key (kbd "C-c C-r") 'ivy-resume))

(use-package ivy-rich
  :after ivy
  :ensure t
  :config
  (ivy-rich-mode 1))

;; Counsel
(use-package counsel
  :ensure t
  :config
  (global-set-key "\M-x" 'counsel-M-x))

;; Swiper
(use-package swiper
  :ensure t
  :config
  (global-set-key "\C-s" 'swiper))

;; Projectile
(use-package projectile :ensure t)

;; Treemacs
(use-package treemacs 
  :ensure t
  :bind
  (:map global-map ("C-x t t" . treemacs)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

;; Yasnippet
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))

;; --------- ;;
;; Languages
;; --------- ;;

;; C
(setq c-default-style "linux"
    c-basic-offset 2)
(setq-default tab-width 2
    indent-tabs-mode t)
(add-hook 'c-mode-hook #'lsp-deferred)
(add-hook 'c++-mode-hook #'lsp-deferred)

;;Go
(use-package go-mode
  :defer t
  :ensure t
  :mode ("\\.go\\'" . go-mode))

(defun lsp-go-install-save-hooks () 
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
(add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
  
;; Rust
(use-package rust-mode
  :ensure t
  :hook (rust-mode . lsp)
  :config
  (setq rust-format-on-save t))

(setq custom-file "~/.emacs.d/custom.el")

(provide 'init)
;;; init.el ends here

(put 'erase-buffer 'disabled nil)
#+END_SRC
